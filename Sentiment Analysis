{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4f78bb8b-5784-4555-94c4-fefb823ccc6e",
   "metadata": {},
   "source": [
    "#BIG DATA ANALYTICS "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78b26ee1-e88f-4887-bac0-8fff60eb6126",
   "metadata": {},
   "source": [
    "This notebook is representation of Sentiment analysis, which is performed on a dataset which consit of customer reviews and rating of multiple different resturants in India."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb8d6853-4b0a-4c47-9318-5cc71b4e1b0b",
   "metadata": {},
   "source": [
    "#PROBLEM STATEMENT"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f948b236-f557-4f87-bde8-e6356b6d4c76",
   "metadata": {},
   "source": [
    "How can we analyze the sentiment of these reviews and use the to our advantage ?\n",
    "\n",
    "With this analysis, we understand what kind of reviews are left to different resturants and what sentiment those carries.\n",
    "\n",
    "How solving this will benefit the company?\n",
    "With these, the company can understand which resturants needs improvement and which are the helpess ones that needs to be discared from the application.\n",
    "\n",
    "Additionally, this analysis can be used for reccomendation that are made to new customers on the app."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "34331c23-97cd-45a2-917f-bb618b24b993",
   "metadata": {},
   "source": [
    "##Libraries Used - "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f39bb04a-3aa3-4f09-9680-d2274b4a6686",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "zsh:1: number expected\n"
     ]
    }
   ],
   "source": [
    "!nltk.download('all') > /dev/null #with dev/null I have hidden the very long output of this cell, as it creates unavoidable plagirsim"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "4b352355-26af-4b6a-a5ec-75d2e36c0e35",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pan\n",
    "import numpy as num\n",
    "import matplotlib.pyplot as mat\n",
    "import seaborn as sea\n",
    "\n",
    "import nltk\n",
    "from nltk.corpus import stopwords as sw\n",
    "from nltk.stem import PorterStemmer as ps\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "from nltk.tokenize import word_tokenize, sent_tokenize\n",
    "from nltk.sentiment.vader import SentimentIntensityAnalyzer\n",
    "import string\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cbad91fe-d39a-4421-a1d5-7230097e1ab7",
   "metadata": {},
   "source": [
    "#DATA COLLECTION"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98fd307c-9a23-467e-85c7-cc3c4b0d590c",
   "metadata": {},
   "source": [
    "The data has been collected through kaggle."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3996ca6c-2466-46aa-866d-5dcd7e1d66ed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Resturant_Name</th>\n",
       "      <th>Reviewer_Name</th>\n",
       "      <th>Review</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Metadata</th>\n",
       "      <th>Time</th>\n",
       "      <th>Pictures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Beyond Flavours</td>\n",
       "      <td>Rusha Chakraborty</td>\n",
       "      <td>The ambience was good, food was quite good . h...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1 Review , 2 Followers</td>\n",
       "      <td>5/25/2019 15:54</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Beyond Flavours</td>\n",
       "      <td>Anusha Tirumalaneedi</td>\n",
       "      <td>Ambience is too good for a pleasant evening. S...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3 Reviews , 2 Followers</td>\n",
       "      <td>5/25/2019 14:20</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Beyond Flavours</td>\n",
       "      <td>Ashok Shekhawat</td>\n",
       "      <td>A must try.. great food great ambience. Thnx f...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2 Reviews , 3 Followers</td>\n",
       "      <td>5/24/2019 22:54</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Beyond Flavours</td>\n",
       "      <td>Swapnil Sarkar</td>\n",
       "      <td>Soumen das and Arun was a great guy. Only beca...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1 Review , 1 Follower</td>\n",
       "      <td>5/24/2019 22:11</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Beyond Flavours</td>\n",
       "      <td>Dileep</td>\n",
       "      <td>Food is good.we ordered Kodi drumsticks and ba...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3 Reviews , 2 Followers</td>\n",
       "      <td>5/24/2019 21:37</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Resturant_Name         Reviewer_Name  \\\n",
       "0  Beyond Flavours     Rusha Chakraborty   \n",
       "1  Beyond Flavours  Anusha Tirumalaneedi   \n",
       "2  Beyond Flavours       Ashok Shekhawat   \n",
       "3  Beyond Flavours        Swapnil Sarkar   \n",
       "4  Beyond Flavours                Dileep   \n",
       "\n",
       "                                              Review  Rating  \\\n",
       "0  The ambience was good, food was quite good . h...     5.0   \n",
       "1  Ambience is too good for a pleasant evening. S...     5.0   \n",
       "2  A must try.. great food great ambience. Thnx f...     5.0   \n",
       "3  Soumen das and Arun was a great guy. Only beca...     5.0   \n",
       "4  Food is good.we ordered Kodi drumsticks and ba...     5.0   \n",
       "\n",
       "                  Metadata             Time  Pictures  \n",
       "0   1 Review , 2 Followers  5/25/2019 15:54         0  \n",
       "1  3 Reviews , 2 Followers  5/25/2019 14:20         0  \n",
       "2  2 Reviews , 3 Followers  5/24/2019 22:54         0  \n",
       "3    1 Review , 1 Follower  5/24/2019 22:11         0  \n",
       "4  3 Reviews , 2 Followers  5/24/2019 21:37         0  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pan.read_csv('/Users/apple/Desktop/MULTIPLE RESTURANT REVIEW.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "325f7c8c-ef52-45d8-95ac-a2ac81a7afdb",
   "metadata": {},
   "source": [
    "The dataset consist of the following columns:\n",
    "- Resturant_Name -> Consist of the name of the resturant that has received the rating & the reviews\n",
    "- Reviewer_Name  -> Consist of the name of the person who has added the rating & the reviews\n",
    "- Review         -> Review written by the customer\n",
    "- Rating         -> Ratings added by the customer, ranging from 1 to 5\n",
    "- Metadata       -> Gives the total reviews and followers of customer commenting\n",
    "- Time(Column)   -> Refers to the time when the rating & reviews were added\n",
    "- Pictures       -> Associated with the number of pictures attached to the reviews"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "83f303e3-0685-4096-8f91-0a84a710eb96",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10000, 7)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "30573351-afb5-456f-ab59-bd385772fe3d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"Beautiful, cozy and classy at the same time, this place is truly recommended for your special days. With 15 percent corporate discounts, you can treat your cotorie well without burning a hole ur pocket. Also, the interior is done so well, you ll love the vibe. On the menu, honey chilli lotus stems, basket biryanis, sizzling brownies were my favourite. Also loved the tomato basil shorba, different from the creamy standards in other restaurants. I'm definitely making more visits to Beyond Flavours. Special mention to Papiya, our hostess for the evening, excellent service :)\""
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Review'].values[20]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c95927ab-82b2-4139-893e-55450714d1a9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 10000 entries, 0 to 9999\n",
      "Data columns (total 7 columns):\n",
      " #   Column          Non-Null Count  Dtype  \n",
      "---  ------          --------------  -----  \n",
      " 0   Resturant_Name  10000 non-null  object \n",
      " 1   Reviewer_Name   9962 non-null   object \n",
      " 2   Review          9955 non-null   object \n",
      " 3   Rating          9962 non-null   float64\n",
      " 4   Metadata        9962 non-null   object \n",
      " 5   Time            9962 non-null   object \n",
      " 6   Pictures        10000 non-null  int64  \n",
      "dtypes: float64(1), int64(1), object(5)\n",
      "memory usage: 547.0+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "6c0c2863-2473-45ce-af05-9322b8615e57",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Resturant_Name     0\n",
       "Reviewer_Name     38\n",
       "Review            45\n",
       "Rating            38\n",
       "Metadata          38\n",
       "Time              38\n",
       "Pictures           0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "06afa3b4-90a1-447b-8e67-ca3be0ee7ec4",
   "metadata": {},
   "source": [
    "#DATA CLEANING"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5bbfdbd4-a7ab-40cc-940d-8bb4441dff1c",
   "metadata": {},
   "source": [
    "Below, I have replaced all the null values under Reviews_Name as Not Given. In this case, their rating & reviews matter more which is why I did not drop them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "3a05a196-c351-4a1e-9b3e-850ef1e4cc6e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Resturant_Name</th>\n",
       "      <th>Reviewer_Name</th>\n",
       "      <th>Review</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Metadata</th>\n",
       "      <th>Time</th>\n",
       "      <th>Pictures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Beyond Flavours</td>\n",
       "      <td>Rusha Chakraborty</td>\n",
       "      <td>The ambience was good, food was quite good . h...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1 Review , 2 Followers</td>\n",
       "      <td>5/25/2019 15:54</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Beyond Flavours</td>\n",
       "      <td>Anusha Tirumalaneedi</td>\n",
       "      <td>Ambience is too good for a pleasant evening. S...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3 Reviews , 2 Followers</td>\n",
       "      <td>5/25/2019 14:20</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Beyond Flavours</td>\n",
       "      <td>Ashok Shekhawat</td>\n",
       "      <td>A must try.. great food great ambience. Thnx f...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2 Reviews , 3 Followers</td>\n",
       "      <td>5/24/2019 22:54</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Beyond Flavours</td>\n",
       "      <td>Swapnil Sarkar</td>\n",
       "      <td>Soumen das and Arun was a great guy. Only beca...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1 Review , 1 Follower</td>\n",
       "      <td>5/24/2019 22:11</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Beyond Flavours</td>\n",
       "      <td>Dileep</td>\n",
       "      <td>Food is good.we ordered Kodi drumsticks and ba...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3 Reviews , 2 Followers</td>\n",
       "      <td>5/24/2019 21:37</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9995</th>\n",
       "      <td>Chinese Pavilion</td>\n",
       "      <td>Abhishek Mahajan</td>\n",
       "      <td>Madhumathi Mahajan Well to start with nice cou...</td>\n",
       "      <td>3.0</td>\n",
       "      <td>53 Reviews , 54 Followers</td>\n",
       "      <td>06/05/2016 0:08</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9996</th>\n",
       "      <td>Chinese Pavilion</td>\n",
       "      <td>Sharad Agrawal</td>\n",
       "      <td>This place has never disappointed us.. The foo...</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2 Reviews , 53 Followers</td>\n",
       "      <td>06/04/2016 22:01</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9997</th>\n",
       "      <td>Chinese Pavilion</td>\n",
       "      <td>Ramandeep</td>\n",
       "      <td>Bad rating is mainly because of \"Chicken Bone ...</td>\n",
       "      <td>1.5</td>\n",
       "      <td>65 Reviews , 423 Followers</td>\n",
       "      <td>06/03/2016 10:37</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9998</th>\n",
       "      <td>Chinese Pavilion</td>\n",
       "      <td>Nayana Shanbhag</td>\n",
       "      <td>I personally love and prefer Chinese Food. Had...</td>\n",
       "      <td>4.0</td>\n",
       "      <td>13 Reviews , 144 Followers</td>\n",
       "      <td>5/31/2016 17:22</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9999</th>\n",
       "      <td>Chinese Pavilion</td>\n",
       "      <td>Bhargava Krishna</td>\n",
       "      <td>Checked in here to try some delicious chinese ...</td>\n",
       "      <td>3.5</td>\n",
       "      <td>472 Reviews , 1302 Followers</td>\n",
       "      <td>5/31/2016 16:41</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10000 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Resturant_Name         Reviewer_Name  \\\n",
       "0      Beyond Flavours     Rusha Chakraborty   \n",
       "1      Beyond Flavours  Anusha Tirumalaneedi   \n",
       "2      Beyond Flavours       Ashok Shekhawat   \n",
       "3      Beyond Flavours        Swapnil Sarkar   \n",
       "4      Beyond Flavours                Dileep   \n",
       "...                ...                   ...   \n",
       "9995  Chinese Pavilion      Abhishek Mahajan   \n",
       "9996  Chinese Pavilion        Sharad Agrawal   \n",
       "9997  Chinese Pavilion             Ramandeep   \n",
       "9998  Chinese Pavilion       Nayana Shanbhag   \n",
       "9999  Chinese Pavilion      Bhargava Krishna   \n",
       "\n",
       "                                                 Review  Rating  \\\n",
       "0     The ambience was good, food was quite good . h...     5.0   \n",
       "1     Ambience is too good for a pleasant evening. S...     5.0   \n",
       "2     A must try.. great food great ambience. Thnx f...     5.0   \n",
       "3     Soumen das and Arun was a great guy. Only beca...     5.0   \n",
       "4     Food is good.we ordered Kodi drumsticks and ba...     5.0   \n",
       "...                                                 ...     ...   \n",
       "9995  Madhumathi Mahajan Well to start with nice cou...     3.0   \n",
       "9996  This place has never disappointed us.. The foo...     4.5   \n",
       "9997  Bad rating is mainly because of \"Chicken Bone ...     1.5   \n",
       "9998  I personally love and prefer Chinese Food. Had...     4.0   \n",
       "9999  Checked in here to try some delicious chinese ...     3.5   \n",
       "\n",
       "                          Metadata              Time  Pictures  \n",
       "0           1 Review , 2 Followers   5/25/2019 15:54         0  \n",
       "1          3 Reviews , 2 Followers   5/25/2019 14:20         0  \n",
       "2          2 Reviews , 3 Followers   5/24/2019 22:54         0  \n",
       "3            1 Review , 1 Follower   5/24/2019 22:11         0  \n",
       "4          3 Reviews , 2 Followers   5/24/2019 21:37         0  \n",
       "...                            ...               ...       ...  \n",
       "9995     53 Reviews , 54 Followers   06/05/2016 0:08         0  \n",
       "9996      2 Reviews , 53 Followers  06/04/2016 22:01         0  \n",
       "9997    65 Reviews , 423 Followers  06/03/2016 10:37         3  \n",
       "9998    13 Reviews , 144 Followers   5/31/2016 17:22         0  \n",
       "9999  472 Reviews , 1302 Followers   5/31/2016 16:41         6  \n",
       "\n",
       "[10000 rows x 7 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Reviewer_Name'].fillna('Not Given', inplace=True)\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ecca943e-25d7-47e0-9f35-c48ce23a540c",
   "metadata": {},
   "source": [
    "Below, I have identified entries where both rating & review are not given in the dataset. Such entries are not useful as the analysis cannot be performed, so I have dropped those values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "29274b30-7429-4b7a-8975-00d4cefeb5d2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           Resturant_Name Reviewer_Name Review  Rating Metadata Time  Pictures\n",
      "8777  American Wild Wings     Not Given    NaN     NaN      NaN  NaN         0\n",
      "8778  American Wild Wings     Not Given    NaN     NaN      NaN  NaN         0\n",
      "8779  American Wild Wings     Not Given    NaN     NaN      NaN  NaN         0\n",
      "8780  American Wild Wings     Not Given    NaN     NaN      NaN  NaN         0\n",
      "8781  American Wild Wings     Not Given    NaN     NaN      NaN  NaN         0\n",
      "8782  American Wild Wings     Not Given    NaN     NaN      NaN  NaN         0\n",
      "8783  American Wild Wings     Not Given    NaN     NaN      NaN  NaN         0\n",
      "8784  American Wild Wings     Not Given    NaN     NaN      NaN  NaN         0\n",
      "8785  American Wild Wings     Not Given    NaN     NaN      NaN  NaN         0\n",
      "8786  American Wild Wings     Not Given    NaN     NaN      NaN  NaN         0\n",
      "8787  American Wild Wings     Not Given    NaN     NaN      NaN  NaN         0\n",
      "8788  American Wild Wings     Not Given    NaN     NaN      NaN  NaN         0\n",
      "8789  American Wild Wings     Not Given    NaN     NaN      NaN  NaN         0\n",
      "8790  American Wild Wings     Not Given    NaN     NaN      NaN  NaN         0\n",
      "8791  American Wild Wings     Not Given    NaN     NaN      NaN  NaN         0\n",
      "8792  American Wild Wings     Not Given    NaN     NaN      NaN  NaN         0\n",
      "8793  American Wild Wings     Not Given    NaN     NaN      NaN  NaN         0\n",
      "8794  American Wild Wings     Not Given    NaN     NaN      NaN  NaN         0\n",
      "8795  American Wild Wings     Not Given    NaN     NaN      NaN  NaN         0\n",
      "8796  American Wild Wings     Not Given    NaN     NaN      NaN  NaN         0\n",
      "8797  American Wild Wings     Not Given    NaN     NaN      NaN  NaN         0\n",
      "8798  American Wild Wings     Not Given    NaN     NaN      NaN  NaN         0\n",
      "8799  American Wild Wings     Not Given    NaN     NaN      NaN  NaN         0\n",
      "9085         Arena Eleven     Not Given    NaN     NaN      NaN  NaN         0\n",
      "9086         Arena Eleven     Not Given    NaN     NaN      NaN  NaN         0\n",
      "9087         Arena Eleven     Not Given    NaN     NaN      NaN  NaN         0\n",
      "9088         Arena Eleven     Not Given    NaN     NaN      NaN  NaN         0\n",
      "9089         Arena Eleven     Not Given    NaN     NaN      NaN  NaN         0\n",
      "9090         Arena Eleven     Not Given    NaN     NaN      NaN  NaN         0\n",
      "9091         Arena Eleven     Not Given    NaN     NaN      NaN  NaN         0\n",
      "9092         Arena Eleven     Not Given    NaN     NaN      NaN  NaN         0\n",
      "9093         Arena Eleven     Not Given    NaN     NaN      NaN  NaN         0\n",
      "9094         Arena Eleven     Not Given    NaN     NaN      NaN  NaN         0\n",
      "9095         Arena Eleven     Not Given    NaN     NaN      NaN  NaN         0\n",
      "9096         Arena Eleven     Not Given    NaN     NaN      NaN  NaN         0\n",
      "9097         Arena Eleven     Not Given    NaN     NaN      NaN  NaN         0\n",
      "9098         Arena Eleven     Not Given    NaN     NaN      NaN  NaN         0\n",
      "9099         Arena Eleven     Not Given    NaN     NaN      NaN  NaN         0\n"
     ]
    }
   ],
   "source": [
    "ratingreviewnull = df[df['Rating'].isnull() & df['Review'].isnull()]\n",
    "print(ratingreviewnull)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "f2f66cf9-efe3-4137-85b5-072cd00488ac",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "38\n"
     ]
    }
   ],
   "source": [
    "totalratingreviewnull = ratingreviewnull.shape[0]\n",
    "print(totalratingreviewnull)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "66a334c3-20c1-4017-829d-3d90424c4454",
   "metadata": {},
   "outputs": [],
   "source": [
    "ds = df.drop(index=ratingreviewnull.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "3be0ed8b-d3d2-4ed2-8894-e2f3764bdb9f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Resturant_Name    0\n",
       "Reviewer_Name     0\n",
       "Review            7\n",
       "Rating            0\n",
       "Metadata          0\n",
       "Time              0\n",
       "Pictures          0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ds.isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c4d7ab3a-89e0-454c-a085-3dc2d1b59d5c",
   "metadata": {},
   "source": [
    "Lastly, below, I have checked for the rest of the null values under review and filled them as Not Given."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "fc080532-cbed-4a06-babe-77fe3935637c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          Resturant_Name           Reviewer_Name Review  Rating  \\\n",
      "2360                Amul        Lakshmi Narayana    NaN     5.0   \n",
      "5799        Being Hungry                   Surya    NaN     5.0   \n",
      "6449     Hyderabad Chefs          Madhurimanne97    NaN     5.0   \n",
      "6489     Hyderabad Chefs                  Harsha    NaN     5.0   \n",
      "7954        Olive Garden  ARUGULLA PRAVEEN KUMAR    NaN     3.0   \n",
      "8228  Al Saba Restaurant                  Suresh    NaN     5.0   \n",
      "8844      Domino's Pizza             Sayan Gupta    NaN     5.0   \n",
      "\n",
      "                     Metadata              Time  Pictures  \n",
      "2360                0 Reviews   7/29/2018 18:00         0  \n",
      "5799  4 Reviews , 4 Followers   7/19/2018 23:55         0  \n",
      "6449                 1 Review   7/23/2018 16:29         0  \n",
      "6489                 1 Review  07/08/2018 21:19         0  \n",
      "7954    1 Review , 1 Follower  08/09/2018 23:25         0  \n",
      "8228                 1 Review   7/20/2018 22:42         0  \n",
      "8844  2 Reviews , 2 Followers  08/09/2018 21:41         0  \n"
     ]
    }
   ],
   "source": [
    "noreviews = ds[ds['Review'].isnull()]\n",
    "print(noreviews)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "91bd3a67-3ab4-4766-ac33-a64aba2ae6b4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Resturant_Name</th>\n",
       "      <th>Reviewer_Name</th>\n",
       "      <th>Review</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Metadata</th>\n",
       "      <th>Time</th>\n",
       "      <th>Pictures</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Beyond Flavours</td>\n",
       "      <td>Rusha Chakraborty</td>\n",
       "      <td>The ambience was good, food was quite good . h...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1 Review , 2 Followers</td>\n",
       "      <td>5/25/2019 15:54</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Beyond Flavours</td>\n",
       "      <td>Anusha Tirumalaneedi</td>\n",
       "      <td>Ambience is too good for a pleasant evening. S...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3 Reviews , 2 Followers</td>\n",
       "      <td>5/25/2019 14:20</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Beyond Flavours</td>\n",
       "      <td>Ashok Shekhawat</td>\n",
       "      <td>A must try.. great food great ambience. Thnx f...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2 Reviews , 3 Followers</td>\n",
       "      <td>5/24/2019 22:54</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Beyond Flavours</td>\n",
       "      <td>Swapnil Sarkar</td>\n",
       "      <td>Soumen das and Arun was a great guy. Only beca...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1 Review , 1 Follower</td>\n",
       "      <td>5/24/2019 22:11</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Beyond Flavours</td>\n",
       "      <td>Dileep</td>\n",
       "      <td>Food is good.we ordered Kodi drumsticks and ba...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3 Reviews , 2 Followers</td>\n",
       "      <td>5/24/2019 21:37</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9995</th>\n",
       "      <td>Chinese Pavilion</td>\n",
       "      <td>Abhishek Mahajan</td>\n",
       "      <td>Madhumathi Mahajan Well to start with nice cou...</td>\n",
       "      <td>3.0</td>\n",
       "      <td>53 Reviews , 54 Followers</td>\n",
       "      <td>06/05/2016 0:08</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9996</th>\n",
       "      <td>Chinese Pavilion</td>\n",
       "      <td>Sharad Agrawal</td>\n",
       "      <td>This place has never disappointed us.. The foo...</td>\n",
       "      <td>4.5</td>\n",
       "      <td>2 Reviews , 53 Followers</td>\n",
       "      <td>06/04/2016 22:01</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9997</th>\n",
       "      <td>Chinese Pavilion</td>\n",
       "      <td>Ramandeep</td>\n",
       "      <td>Bad rating is mainly because of \"Chicken Bone ...</td>\n",
       "      <td>1.5</td>\n",
       "      <td>65 Reviews , 423 Followers</td>\n",
       "      <td>06/03/2016 10:37</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9998</th>\n",
       "      <td>Chinese Pavilion</td>\n",
       "      <td>Nayana Shanbhag</td>\n",
       "      <td>I personally love and prefer Chinese Food. Had...</td>\n",
       "      <td>4.0</td>\n",
       "      <td>13 Reviews , 144 Followers</td>\n",
       "      <td>5/31/2016 17:22</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9999</th>\n",
       "      <td>Chinese Pavilion</td>\n",
       "      <td>Bhargava Krishna</td>\n",
       "      <td>Checked in here to try some delicious chinese ...</td>\n",
       "      <td>3.5</td>\n",
       "      <td>472 Reviews , 1302 Followers</td>\n",
       "      <td>5/31/2016 16:41</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>9962 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Resturant_Name         Reviewer_Name  \\\n",
       "0      Beyond Flavours     Rusha Chakraborty   \n",
       "1      Beyond Flavours  Anusha Tirumalaneedi   \n",
       "2      Beyond Flavours       Ashok Shekhawat   \n",
       "3      Beyond Flavours        Swapnil Sarkar   \n",
       "4      Beyond Flavours                Dileep   \n",
       "...                ...                   ...   \n",
       "9995  Chinese Pavilion      Abhishek Mahajan   \n",
       "9996  Chinese Pavilion        Sharad Agrawal   \n",
       "9997  Chinese Pavilion             Ramandeep   \n",
       "9998  Chinese Pavilion       Nayana Shanbhag   \n",
       "9999  Chinese Pavilion      Bhargava Krishna   \n",
       "\n",
       "                                                 Review  Rating  \\\n",
       "0     The ambience was good, food was quite good . h...     5.0   \n",
       "1     Ambience is too good for a pleasant evening. S...     5.0   \n",
       "2     A must try.. great food great ambience. Thnx f...     5.0   \n",
       "3     Soumen das and Arun was a great guy. Only beca...     5.0   \n",
       "4     Food is good.we ordered Kodi drumsticks and ba...     5.0   \n",
       "...                                                 ...     ...   \n",
       "9995  Madhumathi Mahajan Well to start with nice cou...     3.0   \n",
       "9996  This place has never disappointed us.. The foo...     4.5   \n",
       "9997  Bad rating is mainly because of \"Chicken Bone ...     1.5   \n",
       "9998  I personally love and prefer Chinese Food. Had...     4.0   \n",
       "9999  Checked in here to try some delicious chinese ...     3.5   \n",
       "\n",
       "                          Metadata              Time  Pictures  \n",
       "0           1 Review , 2 Followers   5/25/2019 15:54         0  \n",
       "1          3 Reviews , 2 Followers   5/25/2019 14:20         0  \n",
       "2          2 Reviews , 3 Followers   5/24/2019 22:54         0  \n",
       "3            1 Review , 1 Follower   5/24/2019 22:11         0  \n",
       "4          3 Reviews , 2 Followers   5/24/2019 21:37         0  \n",
       "...                            ...               ...       ...  \n",
       "9995     53 Reviews , 54 Followers   06/05/2016 0:08         0  \n",
       "9996      2 Reviews , 53 Followers  06/04/2016 22:01         0  \n",
       "9997    65 Reviews , 423 Followers  06/03/2016 10:37         3  \n",
       "9998    13 Reviews , 144 Followers   5/31/2016 17:22         0  \n",
       "9999  472 Reviews , 1302 Followers   5/31/2016 16:41         6  \n",
       "\n",
       "[9962 rows x 7 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ds['Review'].fillna('Not Given', inplace=True)\n",
    "ds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "2d75af74-04be-4803-a471-65bf74283753",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Resturant_Name    0\n",
       "Reviewer_Name     0\n",
       "Review            0\n",
       "Rating            0\n",
       "Metadata          0\n",
       "Time              0\n",
       "Pictures          0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ds.isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "862954cb-bcce-4e7c-b7b5-a797676014b8",
   "metadata": {},
   "source": [
    "Our data is now clean, it does not contain any null values or other improper values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "e8c0a2b0-5dac-43e2-bb08-6bbe55203fba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 9962 entries, 0 to 9999\n",
      "Data columns (total 7 columns):\n",
      " #   Column          Non-Null Count  Dtype  \n",
      "---  ------          --------------  -----  \n",
      " 0   Resturant_Name  9962 non-null   object \n",
      " 1   Reviewer_Name   9962 non-null   object \n",
      " 2   Review          9962 non-null   object \n",
      " 3   Rating          9962 non-null   float64\n",
      " 4   Metadata        9962 non-null   object \n",
      " 5   Time            9962 non-null   object \n",
      " 6   Pictures        9962 non-null   int64  \n",
      "dtypes: float64(1), int64(1), object(5)\n",
      "memory usage: 622.6+ KB\n"
     ]
    }
   ],
   "source": [
    "ds.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf1ca7ea-f727-40e2-95c6-adc74937b84c",
   "metadata": {},
   "source": [
    "#DATA ANALYSIS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "001187e9-016d-47d1-a075-9740f81b1db3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Rating\n",
       "5.0    3832\n",
       "4.0    2374\n",
       "1.0    1735\n",
       "3.0    1193\n",
       "2.0     684\n",
       "4.5      69\n",
       "3.5      47\n",
       "2.5      19\n",
       "1.5       9\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ds['Rating'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "8b1a701f-d4b2-449b-b0f9-255855c670a8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: title={'center': 'Ratings'}, xlabel='Rating'>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ds['Rating'].value_counts().sort_index().plot(kind='bar', title='Ratings', color='purple')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "88af5971-da6b-4274-9bae-e78d974585ce",
   "metadata": {},
   "source": [
    "#TEXT PREPROCESSING"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e942e51-2b95-42df-aac3-51d34c34cb92",
   "metadata": {},
   "source": [
    "Below I have applied the varies element of nltk to the dataset. Here's a little about them:\n",
    "\n",
    "- Here, text.lower works by putting all the text in lowecase. This creates uniformity.\n",
    "- Tokenizer is done for the machine to understand the sentences more, removing puntuations.\n",
    "- Porter stemmer further simplifies the process by putting words to its simpliest form. (Ex - jumping becomes jump)\n",
    "\n",
    "Then I have applied all of the that on my dataset, and have put it in a sepearte column calles Processed Review. Furthur, I have done my Sentiment analysis on that column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "5852c328-a487-48ca-b666-ee29b11d71cb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Resturant_Name</th>\n",
       "      <th>Reviewer_Name</th>\n",
       "      <th>Review</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Metadata</th>\n",
       "      <th>Time</th>\n",
       "      <th>Pictures</th>\n",
       "      <th>Processed Review</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Beyond Flavours</td>\n",
       "      <td>Rusha Chakraborty</td>\n",
       "      <td>The ambience was good, food was quite good . h...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1 Review , 2 Followers</td>\n",
       "      <td>5/25/2019 15:54</td>\n",
       "      <td>0</td>\n",
       "      <td>the ambienc wa good food wa quit good had satu...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Beyond Flavours</td>\n",
       "      <td>Anusha Tirumalaneedi</td>\n",
       "      <td>Ambience is too good for a pleasant evening. S...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3 Reviews , 2 Followers</td>\n",
       "      <td>5/25/2019 14:20</td>\n",
       "      <td>0</td>\n",
       "      <td>ambienc is too good for a pleasant even servic...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Beyond Flavours</td>\n",
       "      <td>Ashok Shekhawat</td>\n",
       "      <td>A must try.. great food great ambience. Thnx f...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2 Reviews , 3 Followers</td>\n",
       "      <td>5/24/2019 22:54</td>\n",
       "      <td>0</td>\n",
       "      <td>a must tri great food great ambienc thnx for t...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Beyond Flavours</td>\n",
       "      <td>Swapnil Sarkar</td>\n",
       "      <td>Soumen das and Arun was a great guy. Only beca...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1 Review , 1 Follower</td>\n",
       "      <td>5/24/2019 22:11</td>\n",
       "      <td>0</td>\n",
       "      <td>soumen da and arun wa a great guy onli becaus ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Beyond Flavours</td>\n",
       "      <td>Dileep</td>\n",
       "      <td>Food is good.we ordered Kodi drumsticks and ba...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3 Reviews , 2 Followers</td>\n",
       "      <td>5/24/2019 21:37</td>\n",
       "      <td>0</td>\n",
       "      <td>food is good we order kodi drumstick and baske...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Resturant_Name         Reviewer_Name  \\\n",
       "0  Beyond Flavours     Rusha Chakraborty   \n",
       "1  Beyond Flavours  Anusha Tirumalaneedi   \n",
       "2  Beyond Flavours       Ashok Shekhawat   \n",
       "3  Beyond Flavours        Swapnil Sarkar   \n",
       "4  Beyond Flavours                Dileep   \n",
       "\n",
       "                                              Review  Rating  \\\n",
       "0  The ambience was good, food was quite good . h...     5.0   \n",
       "1  Ambience is too good for a pleasant evening. S...     5.0   \n",
       "2  A must try.. great food great ambience. Thnx f...     5.0   \n",
       "3  Soumen das and Arun was a great guy. Only beca...     5.0   \n",
       "4  Food is good.we ordered Kodi drumsticks and ba...     5.0   \n",
       "\n",
       "                  Metadata             Time  Pictures  \\\n",
       "0   1 Review , 2 Followers  5/25/2019 15:54         0   \n",
       "1  3 Reviews , 2 Followers  5/25/2019 14:20         0   \n",
       "2  2 Reviews , 3 Followers  5/24/2019 22:54         0   \n",
       "3    1 Review , 1 Follower  5/24/2019 22:11         0   \n",
       "4  3 Reviews , 2 Followers  5/24/2019 21:37         0   \n",
       "\n",
       "                                    Processed Review  \n",
       "0  the ambienc wa good food wa quit good had satu...  \n",
       "1  ambienc is too good for a pleasant even servic...  \n",
       "2  a must tri great food great ambienc thnx for t...  \n",
       "3  soumen da and arun wa a great guy onli becaus ...  \n",
       "4  food is good we order kodi drumstick and baske...  "
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def preprocessor(text):\n",
    "    text = text.lower()\n",
    "    tokenizer = nltk.RegexpTokenizer(r\"\\w+\")\n",
    "    words = tokenizer.tokenize(text)\n",
    "    porter_stemmer = nltk.stem.porter.PorterStemmer()\n",
    "    stemmed_words = [porter_stemmer.stem(w) for w in words]\n",
    "    return \" \".join(stemmed_words)\n",
    "    \n",
    "\n",
    "ds[\"Processed Review\"] = ds[\"Review\"].apply(preprocessor)\n",
    "ds.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b720516-9f35-4f65-8d42-ac16e5828c8f",
   "metadata": {},
   "source": [
    "#SENTIMENT ANALYSIS"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c6f1aa23-5a44-4dcf-b8d7-0dd9a5da4e6d",
   "metadata": {},
   "source": [
    "VADER is Valence Aware Dictionary and Sentiment Reasoner, which is used for sentiment analysis which works by assigning scores to each text like neg, neu, pos and compound. And based on that, it assigns sentiment to each text."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "4ffcbe93-349a-4128-99f9-585110113d77",
   "metadata": {},
   "outputs": [],
   "source": [
    "sia = SentimentIntensityAnalyzer()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "fcdba349-519e-49b9-957d-612cd5c31314",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'we had our farewel feast here recent enjoy veri well veri good manag so doe the boy who gave complimentari food and made us more happi food wa perfect dessert starter wa wonder'"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ds['Processed Review'].values[23]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "5400cae8-f867-4967-b31e-4524788370e5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'neg': 0.0, 'neu': 0.709, 'pos': 0.291, 'compound': 0.8979}"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sia.polarity_scores(ds['Processed Review'][23])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "816a3cdf-a1c9-410b-b1b1-232b47a7d33c",
   "metadata": {},
   "source": [
    "About the code above & below -\n",
    "\n",
    "I have just performed one of the element of natural language. Here, I have shown how polarity works.\n",
    "\n",
    "And you can clearly see the emotions of commnets are clearly represented through the numbers.\n",
    "\n",
    "- neg represents the proportion of text that is perceived negatives.\n",
    "\n",
    "- neu represents the proportion of text that is perceived neither negative or positive.\n",
    "\n",
    "- pos represents the proportion of text that is perceived positive.\n",
    "\n",
    "- compound represents the total score of the text, which is calculated by summing the valence scores of neg, neu, pos.\n",
    "(it ranges from -1 and +1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "8cd9fb8f-31c3-450f-be71-10d233d9183d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'short review decent bread and starter bad shaam savera a littl screw up daal makhni but should be a one off case better ambienc at night and importantli good quantiti i want to give a 2 5 but that s not an option extens ambienc it s better at night friend who had been here dure the day didn t like it much so if you prefer ambienc go at night food order a hara bhara kebab shaam savera daal makhni roti and raita ye i m a vegetarian the good part quantiti i wa excit to see shaam savera on their menu but take it from me you do not want to order it it is no where close to what it should be they mess it up real bad especi the color the daal makhni had big chunk of garlic clove which spoil it for me it wasn t creami too the bread and raita were decent the hara bhara kebab were decent too soft they had an extra outer coat of peanut so if you re not a peanut fan on your kebab ask them to skip that step conclus it look like they had made food in a hurri would like to give thi place anoth tri hope that mine wa one of the odd case if thing chang you ll know'"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ds['Processed Review'].values[30]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "2d1fa9d9-f40a-4a0e-b86a-7ef2716f9c60",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'neg': 0.08, 'neu': 0.774, 'pos': 0.147, 'compound': 0.9556}"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sia.polarity_scores(ds['Processed Review'][30])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "01fb1861-880c-40c6-9b2a-94ec288afedc",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_sentiment_scores(text):\n",
    "    return sia.polarity_scores(text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "2e593589-7b5f-413d-a179-76f464a23d18",
   "metadata": {},
   "outputs": [],
   "source": [
    "ds['Sentiment Analysis Score'] = ds['Processed Review'].apply(get_sentiment_scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "96a64892-c0b1-4ab0-adc6-56429b0bbc6f",
   "metadata": {},
   "outputs": [],
   "source": [
    "ds['Compound Score'] = ds['Sentiment Analysis Score'].apply(lambda x: x['compound'])\n",
    "ds['Sentiment'] = ds['Compound Score'].apply(lambda x: 'positive' if x >= 0.05 else ('negative' if x <= -0.05 else 'neutral'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "a38e41d9-69d6-4370-96c8-eb22461f519c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Resturant_Name</th>\n",
       "      <th>Reviewer_Name</th>\n",
       "      <th>Review</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Metadata</th>\n",
       "      <th>Time</th>\n",
       "      <th>Pictures</th>\n",
       "      <th>Processed Review</th>\n",
       "      <th>Sentiment Analysis Score</th>\n",
       "      <th>Compound Score</th>\n",
       "      <th>Sentiment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Beyond Flavours</td>\n",
       "      <td>Rusha Chakraborty</td>\n",
       "      <td>The ambience was good, food was quite good . h...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1 Review , 2 Followers</td>\n",
       "      <td>5/25/2019 15:54</td>\n",
       "      <td>0</td>\n",
       "      <td>the ambienc wa good food wa quit good had satu...</td>\n",
       "      <td>{'neg': 0.0, 'neu': 0.687, 'pos': 0.313, 'comp...</td>\n",
       "      <td>0.9274</td>\n",
       "      <td>positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Beyond Flavours</td>\n",
       "      <td>Anusha Tirumalaneedi</td>\n",
       "      <td>Ambience is too good for a pleasant evening. S...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3 Reviews , 2 Followers</td>\n",
       "      <td>5/25/2019 14:20</td>\n",
       "      <td>0</td>\n",
       "      <td>ambienc is too good for a pleasant even servic...</td>\n",
       "      <td>{'neg': 0.0, 'neu': 0.625, 'pos': 0.375, 'comp...</td>\n",
       "      <td>0.9001</td>\n",
       "      <td>positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Beyond Flavours</td>\n",
       "      <td>Ashok Shekhawat</td>\n",
       "      <td>A must try.. great food great ambience. Thnx f...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2 Reviews , 3 Followers</td>\n",
       "      <td>5/24/2019 22:54</td>\n",
       "      <td>0</td>\n",
       "      <td>a must tri great food great ambienc thnx for t...</td>\n",
       "      <td>{'neg': 0.0, 'neu': 0.708, 'pos': 0.292, 'comp...</td>\n",
       "      <td>0.8934</td>\n",
       "      <td>positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Beyond Flavours</td>\n",
       "      <td>Swapnil Sarkar</td>\n",
       "      <td>Soumen das and Arun was a great guy. Only beca...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1 Review , 1 Follower</td>\n",
       "      <td>5/24/2019 22:11</td>\n",
       "      <td>0</td>\n",
       "      <td>soumen da and arun wa a great guy onli becaus ...</td>\n",
       "      <td>{'neg': 0.0, 'neu': 0.708, 'pos': 0.292, 'comp...</td>\n",
       "      <td>0.8591</td>\n",
       "      <td>positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Beyond Flavours</td>\n",
       "      <td>Dileep</td>\n",
       "      <td>Food is good.we ordered Kodi drumsticks and ba...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3 Reviews , 2 Followers</td>\n",
       "      <td>5/24/2019 21:37</td>\n",
       "      <td>0</td>\n",
       "      <td>food is good we order kodi drumstick and baske...</td>\n",
       "      <td>{'neg': 0.0, 'neu': 0.571, 'pos': 0.429, 'comp...</td>\n",
       "      <td>0.9382</td>\n",
       "      <td>positive</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Resturant_Name         Reviewer_Name  \\\n",
       "0  Beyond Flavours     Rusha Chakraborty   \n",
       "1  Beyond Flavours  Anusha Tirumalaneedi   \n",
       "2  Beyond Flavours       Ashok Shekhawat   \n",
       "3  Beyond Flavours        Swapnil Sarkar   \n",
       "4  Beyond Flavours                Dileep   \n",
       "\n",
       "                                              Review  Rating  \\\n",
       "0  The ambience was good, food was quite good . h...     5.0   \n",
       "1  Ambience is too good for a pleasant evening. S...     5.0   \n",
       "2  A must try.. great food great ambience. Thnx f...     5.0   \n",
       "3  Soumen das and Arun was a great guy. Only beca...     5.0   \n",
       "4  Food is good.we ordered Kodi drumsticks and ba...     5.0   \n",
       "\n",
       "                  Metadata             Time  Pictures  \\\n",
       "0   1 Review , 2 Followers  5/25/2019 15:54         0   \n",
       "1  3 Reviews , 2 Followers  5/25/2019 14:20         0   \n",
       "2  2 Reviews , 3 Followers  5/24/2019 22:54         0   \n",
       "3    1 Review , 1 Follower  5/24/2019 22:11         0   \n",
       "4  3 Reviews , 2 Followers  5/24/2019 21:37         0   \n",
       "\n",
       "                                    Processed Review  \\\n",
       "0  the ambienc wa good food wa quit good had satu...   \n",
       "1  ambienc is too good for a pleasant even servic...   \n",
       "2  a must tri great food great ambienc thnx for t...   \n",
       "3  soumen da and arun wa a great guy onli becaus ...   \n",
       "4  food is good we order kodi drumstick and baske...   \n",
       "\n",
       "                            Sentiment Analysis Score  Compound Score Sentiment  \n",
       "0  {'neg': 0.0, 'neu': 0.687, 'pos': 0.313, 'comp...          0.9274  positive  \n",
       "1  {'neg': 0.0, 'neu': 0.625, 'pos': 0.375, 'comp...          0.9001  positive  \n",
       "2  {'neg': 0.0, 'neu': 0.708, 'pos': 0.292, 'comp...          0.8934  positive  \n",
       "3  {'neg': 0.0, 'neu': 0.708, 'pos': 0.292, 'comp...          0.8591  positive  \n",
       "4  {'neg': 0.0, 'neu': 0.571, 'pos': 0.429, 'comp...          0.9382  positive  "
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ds.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "98fe4e9c-49ce-4eda-81af-555d2eb7e77f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Sentiment\n",
       "positive    7332\n",
       "negative    1668\n",
       "neutral      962\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ds['Sentiment'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "3e8a4891-5423-4aa9-9821-9b61224c1dbe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ds['Sentiment'].value_counts().plot(kind='pie', autopct='%1.1f%%')\n",
    "mat.title('Sentiment Distribution')\n",
    "mat.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ec350ea-021c-4df1-872a-f9ba15b801db",
   "metadata": {},
   "source": [
    "In the above codes, I have performed the VADER sentiment scoring. I performed it on the complete processed reviews, and as it is visualized in the above pie chart.\n",
    "\n",
    "73.6% of our comments have a positive score.\n",
    "\n",
    "16.7% of those have negative score.\n",
    "\n",
    "9.7% of those have a neutral score"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc21949f-4dd3-4c40-8522-ea291b936070",
   "metadata": {},
   "source": [
    "#FEATURE ENGINEERING"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cac1333e-e68e-4b21-8e6a-1e33ca5759d8",
   "metadata": {},
   "source": [
    "I have performed vectorization on processed review so as to make sure the analysis is done accurately."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "8b9fbef6-40c3-4ef6-8f50-4c4b0b976975",
   "metadata": {},
   "outputs": [],
   "source": [
    "vectorizer_data = TfidfVectorizer()\n",
    "X = vectorizer_data.fit_transform(ds['Processed Review'])\n",
    "y = ds['Sentiment']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "2cfa686d-005c-4f42-8316-8023d33435f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0da870e6-9835-4edf-967c-4732034f4141",
   "metadata": {},
   "source": [
    "In the above two code, I have performed vectorization on the dataset to ensure that the text got converted into numerical which is acceptable by the machine.\n",
    "\n",
    "After that, I have split the data randomly."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f711b3f-0082-4a27-a476-3e919b4baa47",
   "metadata": {},
   "source": [
    "#TRAINING THE MODELS"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0219eae7-3d02-41a5-ad94-d91b041759d1",
   "metadata": {},
   "source": [
    "Now, I will train the model to check how it works out with three different machine learning algorithms. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "342b76bd-878b-4b28-8b58-b0b6d99cdbbd",
   "metadata": {},
   "source": [
    "##LOGISTIC REGRESSION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "e7ea08a3-d983-44eb-891a-ff5e37555924",
   "metadata": {},
   "outputs": [],
   "source": [
    "model1 = LogisticRegression()\n",
    "model1.fit(X_train, y_train)\n",
    "prediction1 = model1.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "0fced672-0b49-4d55-bb26-aa0ec7bb317b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic Regression:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "    negative       0.79      0.66      0.72       342\n",
      "     neutral       0.90      0.69      0.79       190\n",
      "    positive       0.90      0.97      0.93      1461\n",
      "\n",
      "    accuracy                           0.89      1993\n",
      "   macro avg       0.87      0.77      0.81      1993\n",
      "weighted avg       0.89      0.89      0.88      1993\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"Logistic Regression:\\n\", classification_report(y_test, prediction1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "b553ffe1-55fd-434a-a836-2c233583a554",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "confusionmatrix1 = confusion_matrix(y_test, prediction1)\n",
    "mat.figure(figsize=(5, 5))\n",
    "sea.heatmap(confusionmatrix1, annot=True,fmt='d', cbar=False)\n",
    "mat.xlabel('Predicted')\n",
    "mat.ylabel('Actual')\n",
    "mat.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b9ed4cf5-1e0d-4ce7-92db-246ccd805f5e",
   "metadata": {},
   "source": [
    "##SUPPORT VECTOR MACHINE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "a39d1df0-6a2c-428f-bb55-aa239da0d3f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "model2 = SVC()\n",
    "model2.fit(X_train, y_train)\n",
    "prediction2 = model2.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "8eabe307-e885-46d5-ac96-8c81eb7a2395",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Support Vector Classifier:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "    negative       0.80      0.64      0.71       342\n",
      "     neutral       0.95      0.65      0.77       190\n",
      "    positive       0.89      0.97      0.93      1461\n",
      "\n",
      "    accuracy                           0.88      1993\n",
      "   macro avg       0.88      0.75      0.80      1993\n",
      "weighted avg       0.88      0.88      0.87      1993\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"Support Vector Classifier:\\n\", classification_report(y_test, prediction2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "677c1f6e-1664-4142-a1c1-ec8bab363dca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "confusionmatrix2 = confusion_matrix(y_test, prediction2)\n",
    "mat.figure(figsize=(5, 5))\n",
    "sea.heatmap(confusionmatrix2, annot=True,fmt='d', cbar=False)\n",
    "mat.xlabel('Predicted')\n",
    "mat.ylabel('Actual')\n",
    "mat.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28fbf2e7-a01e-439c-8448-c664506a11a5",
   "metadata": {},
   "source": [
    "##NAIVE BAYES"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "c74bc144-5372-469e-b448-46543c833eed",
   "metadata": {},
   "outputs": [],
   "source": [
    "model3 = MultinomialNB()\n",
    "model3.fit(X_train, y_train)\n",
    "prediction3 = model3.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "af3678d7-3281-4606-8eb3-8eeb21aa934b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Naive Bayes:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "    negative       1.00      0.04      0.08       342\n",
      "     neutral       1.00      0.02      0.04       190\n",
      "    positive       0.74      1.00      0.85      1461\n",
      "\n",
      "    accuracy                           0.74      1993\n",
      "   macro avg       0.91      0.35      0.32      1993\n",
      "weighted avg       0.81      0.74      0.64      1993\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"Naive Bayes:\\n\", classification_report(y_test, prediction3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "d5ef0971-ab90-4e9e-8020-1fcd6fa81b1d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "confusionmatrix3 = confusion_matrix(y_test, prediction3)\n",
    "mat.figure(figsize=(5, 5))\n",
    "sea.heatmap(confusionmatrix3, annot=True,fmt='d', cbar=False)\n",
    "mat.xlabel('Predicted')\n",
    "mat.ylabel('Actual')\n",
    "mat.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "230e65ac-6c09-4489-84a7-63e0df70c704",
   "metadata": {},
   "source": [
    "##Random Forest Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "49a431ab-aba9-4c2e-b9f7-274c57020de5",
   "metadata": {},
   "outputs": [],
   "source": [
    "model4 = RandomForestClassifier(random_state=42)\n",
    "model4.fit(X_train, y_train)\n",
    "prediction4 = model4.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "5f04235a-7cac-40fe-b920-a03fc8d4c06e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random Forest:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "    negative       0.87      0.40      0.55       342\n",
      "     neutral       0.91      0.65      0.76       190\n",
      "    positive       0.85      0.99      0.91      1461\n",
      "\n",
      "    accuracy                           0.85      1993\n",
      "   macro avg       0.88      0.68      0.74      1993\n",
      "weighted avg       0.86      0.85      0.84      1993\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"Random Forest:\\n\", classification_report(y_test, prediction4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "86a25e2b-a324-4bab-8cb9-73b8255f82e3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "confusionmatrix4 = confusion_matrix(y_test, prediction4)\n",
    "mat.figure(figsize=(5, 5))\n",
    "sea.heatmap(confusionmatrix4, annot=True,fmt='d', cbar=False)\n",
    "mat.xlabel('Predicted')\n",
    "mat.ylabel('Actual')\n",
    "mat.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "534f2709-5f50-4992-b0c9-504dfba3fa84",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic Regression: 0.8886101354741596\n",
      "Support Vector Machine: 0.8810837932764677\n",
      "Naive Bayes: 0.7420973406924235\n",
      "Random Forest: 0.8549924736578023\n"
     ]
    }
   ],
   "source": [
    "print(\"Logistic Regression:\", accuracy_score(y_test, prediction1))\n",
    "print(\"Support Vector Machine:\", accuracy_score(y_test, prediction2))\n",
    "print(\"Naive Bayes:\", accuracy_score(y_test, prediction3))\n",
    "print(\"Random Forest:\", accuracy_score(y_test, prediction4))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e35ab7d1-3443-44df-8a9b-958fef09630a",
   "metadata": {},
   "source": [
    "In the above codes, I have perfomed a total of 4 different machine algorithm on my dataset. Have created classification reports as well to understand more about the results of each.\n",
    "\n",
    "The accuracy of logitic regression is the best, which is almost 89% - Making it our best model."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a9e5a5d-0e19-4fb8-92d1-15a2e9c85e1c",
   "metadata": {},
   "source": [
    "#CONCLUSION AND DISCUSSION"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c55533bb-5fdc-4ca6-9e4a-5d41fc03a8ff",
   "metadata": {},
   "source": [
    "What I have learnt through this assessemnt - \n",
    "\n",
    "- Was able to tranform my theoritical knowledge of the topic into practical knowldege.\n",
    "- I learnt and understood NLP's whole concept in depth."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8893141c-2bc2-4c6d-8795-9983096c8f00",
   "metadata": {},
   "source": [
    "Strengths of this notebook -\n",
    "\n",
    "- I believe that I have created a very structured notebook, which makes it easier to understand and read.\n",
    "- I have worked on a very practical issue, as this kind of algorithm can help food application to manage resturantant better and also, will be able to help resturants work better by imporving based on the sentiment of the comments."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ef9bcc9-13a4-491b-86d1-a40594ae4c0b",
   "metadata": {},
   "source": [
    "Weakness of this notebook -\n",
    "\n",
    "- After I assigned the sentiments to the dataset, it can be seen that 73% of the reviews are positive. Which shows that the data is pretty imbalanced.\n",
    "- This dataset has reviews of almost 10,000 resturants. It makes it a bit harder to provide thorough analysis."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "362b71d5-f789-4a12-975d-1d0789fa9dc6",
   "metadata": {},
   "source": [
    "My suggestion to the business through this assessment would be - (assuming the business is a food delivery application, which is home for many resturants)\n",
    "\n",
    "- Based on the total negative and positive reviews, send a report to each resturant to make them aware of their performances.\n",
    "- Resturant who does not have any reviews, or have a large quality of negative reviews must be removed from the platform after a discussion which the manager.\n",
    "- Resturants with positive reviews, can be displayed as suggestions for new customer or for the customers who are trying something new.\n",
    "- For the individual resturant people, they can work through these reviews and understand and work on places they neew to improve."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f5b65ad8-93f6-4f59-a500-f923f6801a58",
   "metadata": {},
   "source": [
    "Overall, I believe I have learnt a lot more about sentiment analysis and the importance of it. I had a lot of fun working on it, as it very very intreseting as well."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d487083-33b7-4b51-bcdc-a0c8d631291f",
   "metadata": {},
   "source": [
    "##THANK YOU "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
